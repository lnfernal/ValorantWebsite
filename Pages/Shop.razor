@page "/shop"
@inject ValorantService ValService
@inject NavigationManager NavManager
<PageTitle>Shop</PageTitle>
@using Microsoft.AspNetCore.Components
@using ValorantManager.Data

 @if (DailyItemShop != null && currentShop != null)
{
    <h2>Skin Offers</h2>

    <p class="fs-3">@ShopTimeLeft(currentShop.SkinsPanelLayout.SingleItemOffersRemainingDurationInSeconds) left</p>
    <div class="card" style="width: 150px;background:transparent; position:relative; top:0px; right:0px; border:0;float:right;margin-top:-50px">
        <ul class="list-group list-unstyled">
            <li class="list-group-item" style="background:transparent; color:white;border:0">
                <img src="https://media.valorant-api.com/currencies/85ad13f7-3d1b-5128-9eb2-7cd8ee0b5741/displayicon.png" style="width:25px; height:25px" />
                @ValService.user.wallet.Balances.ValorantPoints
            </li>
            <li class="list-group-item" style="background:transparent; color:white;border:0">
                <img src="https://media.valorant-api.com/currencies/e59aa87c-4cbf-517a-5983-6e81511be9b7/displayicon.png" style="width:25px; height:25px" />
                @ValService.user.wallet.Balances.Radianite
            </li>
        </ul>
    </div>
    <br />
    <br />


    <div class="card-group">

        @foreach (var weapons in DailyItemShop)
        {
            <div class="col-sm-3">
                <div class="card text-white m-1" style="height:auto; background:#484848">
                    <div class="card-header text-center" style="font-size:small">@weapons.displayName</div>
                    <div class="card-body text-center align-content-center">
                        <img class="card-body card-img-top mx-auto text-center align-content-center" src="@weapons.displayIcon" style="width:100%; height:100px; object-fit:contain">
                    </div>
                </div>
            </div>
        }
    </div>

    <br />
    @if (NightMarket != null && NightMarket.Count > 0)
    {
        <h2>Night Market</h2>
        <p class="fs-3">@ShopTimeLeft(currentShop.BonusStore.BonusStoreRemainingDurationInSeconds) left</p>
        <div class="card-group">

            @foreach (var weapons in NightMarket)
            {
                <div class="col-sm-3">
                    <div class="card text-white m-1" style="height:auto; background:#484848">
                        <div class="card-header text-center" style="font-size:small">@weapons.displayName</div>
                        <div class="card-body text-center align-content-center">
                            <img class="card-body card-img-top mx-auto text-center align-content-center" src="@weapons.displayIcon" style="width:100%; height:100px; object-fit:contain">
                        </div>
                        <div class="card-footer">@weapons.NightMarketPrice VP (@weapons.NightMarketPercentOff% off)</div>
                    </div>
                </div>
            }
        </div>
    }
}

@code
{

    private JsonModels.StoreFrontV2.Root StoreFront { get; set; } = null;

    private List<JsonModels.Weapons.Level> DailyItemShop { get; set; } = null;
    private List<JsonModels.Weapons.Level> NightMarket { get; set; } = null;
    private JsonModels.StoreFrontV2.Root currentShop { get; set; } = null;

    List<JsonModels.Weapons.Level> GetShop(JsonModels.StoreFrontV2.Root StoreFront)
    {
        List<JsonModels.Weapons.Level> shopItems = new List<JsonModels.Weapons.Level>();
        if (StoreFront != null)
        {
            foreach (string WeaponLevelUUID in StoreFront.SkinsPanelLayout.SingleItemOffers)
            {
                for (var i = 0; i < ValService.Weapons.data.Count; i++)
                {
                    foreach (var skin in ValService.Weapons.data[i].skins)
                    {
                        if (WeaponLevelUUID == skin.levels[0].uuid)
                            shopItems.Add(skin.levels[0]);
                    }
                }

            }
        }
        return shopItems;
    }

    List<JsonModels.Weapons.Level> GetNightmarket(JsonModels.StoreFrontV2.Root StoreFront)
    {
        try
        {
            List<JsonModels.Weapons.Level> shopItems = new List<JsonModels.Weapons.Level>();
            if (StoreFront != null && StoreFront.BonusStore != null)
            {
                foreach (var offers in StoreFront.BonusStore.BonusStoreOffers)
                {
                    for (var i = 0; i < ValService.Weapons.data.Count; i++)
                    {
                        foreach (var skin in ValService.Weapons.data[i].skins)
                        {
                            if (offers.Offer.OfferID == skin.levels[0].uuid)
                            {
                                skin.levels[0].NightMarketPrice = offers.DiscountCosts._85ad13f73d1b51289eb27cd8ee0b5741;
                                skin.levels[0].NightMarketPercentOff = offers.DiscountPercent;
                                shopItems.Add(skin.levels[0]);
                            }

                        }
                    }
                }
                return shopItems;
            }
            else
            {
                return new List<JsonModels.Weapons.Level>();
            }

        }
        catch
        {
            return new List<JsonModels.Weapons.Level>();
        }

    }

    public string ShopTimeLeft(int secondsLeft)
    {
        TimeSpan t = TimeSpan.FromSeconds(secondsLeft);

        return $"{t.Days} days, {t.Hours} hours, {t.Minutes} minutes";
    }


    protected override void OnInitialized()
    {
        if (ValService.user.loginState == LoginState.LoggedIn)
        {
            if (currentShop == null)
                currentShop = ValService.Store_GetStorefrontV2();

            if (DailyItemShop == null)
                DailyItemShop = GetShop(currentShop);

            if (NightMarket == null)
                NightMarket = GetNightmarket(currentShop);

            if (ValService.user.wallet == null)
                ValService.user.wallet = ValService.Store_GetWallet();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (ValService.user.loginState != LoginState.LoggedIn)
            NavManager.NavigateTo("/");
    }
}