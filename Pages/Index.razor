@using System.ComponentModel.DataAnnotations
@inherits LayoutComponentBase
@using RestSharp
@using ValorantManager.Data
@using System.Net;
@using System.Web;
@using ValorantManager.JsonModels;
@using ValorantManager.Shared;
@using ValorantManager.Util;
@using Microsoft.AspNetCore.WebUtilities
@using System.Text;
@using System.Text.RegularExpressions;
@inject ValorantService valService
@inject NavigationManager NavManager
@inject ICookie cookie
@page "/"

<PageTitle>Pro Swapper Valorant</PageTitle>

<h1>Welcome to Pro Swapper Valorant</h1>
<h6 class="alert alert-success" role="alert">
    Note: We do NOT store any user information such as usernames, passwords or tokens. Riot Games emails the inbox with a one time password when changing passwords so we cannot change your password.
</h6>

@if (valService.user.loginState != LoginState.LoggedIn )
{
    <label class="font-weight-bold">Please login with your username and password:</label>
                
        @if (Show2FAInput)
        {
            <EditForm Model="@Code2FA">
                <label class="font-weight-bold">Please check your email for your 2FA code.</label>
                <br>
                <br>
                <label class="font-weight-bold">2FA Code:</label>
                <InputText class="form-control" style="width:30vw" @bind-Value="Code2FA" placeholder="000000" />
            </EditForm>

             <br />
            <button class="btn btn-primary" @onclick="Submit2FA">Submit 2FA Code</button>
            <br />
        }
        else
        {
            <EditForm Model="@valService.user">
                <InputText class="form-control" style="width:30vw" @bind-Value="valService.user.auth_username" placeholder="Username" />
                <br>
                <InputText type="password" class="form-control" style="width:30vw" @bind-Value="valService.user.auth_password" placeholder="Password" />
            </EditForm>

             <br />
            <button class="btn btn-primary" @onclick="LoginButton">Login</button>
            <br />
        }
    

    @if (valService.user.loginState == LoginState.WrongLogin && !Show2FAInput)
    {
        <div class="alert alert-danger" role="alert" style="width:60vw; word-break:break-word">That username and/or password is incorrect! Make sure that you are entering your Riot username and NOT your Riot ID with the #. If you do not know your Riot Username you can request it with your email <a href="https://recovery.riotgames.com/en/forgot-username">here</a></div>
    }
    @if (valService.user.loginState == LoginState.WrongLogin && Show2FAInput)
    {
        <div class="alert alert-danger" role="alert" style="width:60vw; word-break:break-word">That 2FA code is incorrect!</div>
    }
}

@if (valService.user.loginState == LoginState.LoggingIn)
{
    <strong>Logging in...</strong>
    <div class="spinner-border text-danger" role="status">
    </div>
}

@if (valService.user.loginState == LoginState.LoggedIn)
{
    <label class="col-2 font-weight-bold">Welcome @valService.user.Name</label>
}

<br />
<hr />
<h2>News</h2>
<br />


    <div class="card-group">
        @foreach (var item in News.Result.Data.AllContentstackArticles.Nodes.Take(16).ToList())
        {
            <div class="col-sm-3">
                <div class="card text-white m-1 text-center" style="background:#484848">
                    <div class="card-header text-center" style="font-size:medium;height:60px">@item.Title</div>
                    <div class="card-body text-center align-content-center">
                        <a href="@GetNewsURL(item)" target="_blank">
                            <img class="card-img-top mx-auto" src="@item.Banner.Url" style="width: 100%;height:100%; object-fit:fill">
                        </a>
                    </div>
                    <div class="card-footer text-muted">@GetTimeSince(item.Date)</div>
                </div>
            </div>
        }
    </div>

<br />

<footer style="position:fixed; right:0px; bottom:0px;">
    <div class="list-group-item text-break" style="font-size:small;background:#c62828;color:white;width:40vw;border-radius:13px">We are not affiliated, associated, authorized, endorsed by, or in any way officially connected with VALORANT or Riot Games, Inc.</div>
</footer>

@code {

    public static News.Root News 
    { 
        get
        {
            if (News_Instance == null)
                News_Instance = JsonSerializer.Deserialize<News.Root>(new WebClient().DownloadString("https://playvalorant.com/page-data/en-us/news/page-data.json"));

            return News_Instance;
        } 
    }
    private static News.Root News_Instance { get; set; } = null;

    private bool AlreadyGotCookies = false;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!AlreadyGotCookies)
        {
            if (valService.user.loginState != LoginState.LoggedIn || valService.user.loginState != LoginState.LoggingIn)
            {
                bool PreLogin = false;
                string CookieToken = await cookie.GetValue("data");
                PreLogin = CookieToken.Length > 1;

                if (PreLogin && valService.user.loginState != LoginState.LoggedIn)
                {
                    valService.user.loginState = LoginState.LoggingIn;
                    await InvokeAsync(StateHasChanged);


                    //Methods for logging in
                    if (CookieToken.Length > 1)//FIX auto login through cookie, base64 not working
                    {
                        AlreadyGotCookies = true;
                        string dataCookie = CookieToken.Base64Decode();
                        string[] decoded = dataCookie.Split(':');
                        valService.user.auth_username = decoded[0];
                        valService.user.auth_password = decoded[1];
                        await InvokeAsync(StateHasChanged);
                        await Task.Run(() => LoginButton());
                    }
                }
            }
        }
    }



    private bool Show2FAInput = false;
    private string Code2FA = ""; 

    public Classes.LoginResponse.Rootobject Login(string username, string password)
    {
        UserPassLogin.GetAuthorization();//set cookie container
        string loginResponse = UserPassLogin.Authenticate(UserPassLogin._cookieContainer, username, password);
        var loginObj = JsonSerializer.Deserialize<Classes.LoginResponse.Rootobject>(loginResponse);

        switch (loginObj.type)
        {
            //Normal username & password login
            case "response":
                return loginObj;
            case "multifactor"://2FA login
                Show2FAInput = true;
                InvokeAsync(StateHasChanged);
                return null;
            default:
                return null;
        }
    }

    public async Task Submit2FA()
    {
        try
        {
            string auth2FAURL = UserPassLogin.MultifactorCode(Code2FA, UserPassLogin._cookieContainer).GetProperty("response").GetProperty("parameters").GetProperty("uri").GetString();
            string bearer = Regex.Match(auth2FAURL, @"access_token=(.+?)&scope=").Groups[1].Value;
            string id_token = Regex.Match(auth2FAURL, @"id_token=(.+?)&token_type=").Groups[1].Value;

            valService.user.Token = bearer;
            valService.user.riotServer = valService.GetUserRegion(bearer, id_token);//Using the user's bearer token & id_token, fetch region.

            await Task.Run(() => valService.GetUserInfo());
            await cookie.SetValue("data", (valService.user.auth_username + ';' + valService.user.auth_password).Base64Encode(), 365);
        }
        catch
        {
            valService.user.loginState = LoginState.WrongLogin;

        }
        await InvokeAsync(StateHasChanged);
    }


    private async Task LoginButton()
    {
        try
        {
            valService.user.loginState = LoginState.LoggingIn;
            Classes.LoginResponse.Rootobject loginResponse = Login(valService.user.auth_username, valService.user.auth_password);
            if (loginResponse != null)
            {
                string id_token = Regex.Match(loginResponse.response.parameters.uri, @"id_token=(.+?)&token_type=").Groups[1].Value;
                string bearer = Regex.Match(loginResponse.response.parameters.uri, @"access_token=(.+?)&scope=").Groups[1].Value;
                valService.user.Token = bearer;//Store the user's bearer token
                valService.user.riotServer = valService.GetUserRegion(bearer, id_token);//Using the user's bearer token & id_token, fetch region.


                if (String.IsNullOrEmpty(valService.user.Token) || valService.user.Token == "rate_limited")
                {
                    valService.user.loginState = LoginState.LoggedOut;
                    await InvokeAsync(StateHasChanged);
                    return;
                }

                await Task.Run(() => valService.GetUserInfo());
                string base64cookie = (valService.user.auth_username + ':' + valService.user.auth_password).Base64Encode();
                await cookie.SetValue("data",base64cookie , 365);
            }
            
        }
        catch (Exception ex)
        {
            valService.user.loginState = LoginState.WrongLogin;
            await cookie.SetValue("data", string.Empty, 0);
        }
        await InvokeAsync(StateHasChanged);
    }

    private static string GetNewsURL(JsonModels.News.Node item)
    {
        if (item.ExternalLink.Length > 0)
            return item.ExternalLink;
        else
            return $"https://playvalorant.com/en-us{@item.Url.url}";
    }

    private static string GetTimeSince(DateTime date) => ToReadableString(DateTime.Now.ToUniversalTime() - date);

    public static string ToReadableString(TimeSpan span)
    {
        if (span.TotalHours < 24)
            return Math.Round(span.TotalHours) + " hours ago";
        else
            return Math.Round(span.TotalDays) + " days ago";
    }
}